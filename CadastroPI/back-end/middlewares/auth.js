// src/middlewares/auth.js
const jwt = require('jsonwebtoken');

/**
 * Middleware de autentica√ß√£o - verifica se usu√°rio est√° logado
 * Extrai o token JWT e valida, salvando dados do usu√°rio em req.user
 * @param {Request} req - Request do Express
 * @param {Response} res - Response do Express  
 * @param {NextFunction} next - Fun√ß√£o next do Express
 */
function authenticateToken(req, res, next) {
  console.log('üîç Middleware - Verificando autentica√ß√£o');

  // Tenta pegar o token do cookie primeiro, depois do header Authorization
  const tokenFromCookie = req.cookies?.token;
  const tokenFromHeader = req.headers['authorization']?.split(' ')[1]; // "Bearer TOKEN"
  const token = tokenFromCookie || tokenFromHeader;

  if (!token) {
    console.log('‚ùå Middleware - Token n√£o encontrado');
    return res.status(401).json({ 
      error: 'Token n√£o encontrado',
      message: 'Voc√™ precisa estar logado para acessar este recurso' 
    });
  }

  try {
    // Verifica e decodifica o token JWT
    const secret = process.env.JWT_SECRET || 'fallback_secret_key';
    const decoded = jwt.verify(token, secret);

    // ‚úÖ CORRE√á√ÉO: Extrai tanto o ID (sub) quanto o role do token
    // Isso √© essencial para o sistema de autoriza√ß√£o funcionar
    const userId = parseInt(decoded.sub);
    const userRole = decoded.role || 'user'; // Default para 'user'

    // ‚úÖ Salva dados do usu√°rio no request para uso nas rotas
    req.user = {
      id: userId,
      role: userRole,
    };

    console.log('‚úÖ Middleware - Usu√°rio autenticado:', userId, 'Role:', userRole);
    return next();

  } catch (error) {
    console.error('‚ùå Middleware - Token inv√°lido:', error.message);
    
    return res.status(401).json({ 
      error: 'Token inv√°lido',
      message: 'Seu token de acesso √© inv√°lido ou expirou' 
    });
  }
}

/**
 * Middleware de autoriza√ß√£o - verifica se usu√°rio tem permiss√£o
 * Deve ser usado AP√ìS o authenticateToken
 * @param {string} requiredRole - Role necess√°rio para acessar a rota
 * @returns {Function} - Middleware function
 */
function authorizeRole(requiredRole) {
  return (req, res, next) => {
    console.log('üîç Middleware - Verificando autoriza√ß√£o para role:', requiredRole);

    // Verifica se o usu√°rio foi autenticado primeiro
    if (!req.user) {
      console.log('‚ùå Middleware - Usu√°rio n√£o autenticado');
      return res.status(401).json({ 
        error: 'Usu√°rio n√£o autenticado',
        message: 'Voc√™ precisa estar logado' 
      });
    }

    const userRole = req.user.role;

    // ‚úÖ Verifica se o usu√°rio tem o role necess√°rio
    // Admin sempre tem acesso a tudo
    if (userRole !== requiredRole && userRole !== 'admin') {
      console.log('‚ùå Middleware - Permiss√£o insuficiente. User role:', userRole, 'Required:', requiredRole);
      
      return res.status(403).json({ 
        error: 'Permiss√£o insuficiente',
        message: `Voc√™ precisa ser ${requiredRole} para acessar este recurso` 
      });
    }

    console.log('‚úÖ Middleware - Autoriza√ß√£o concedida para:', userRole);
    return next();
  };
}

/**
 * Middleware que verifica se usu√°rio √© admin
 * Atalho para authorizeRole('admin')
 */
function requireAdmin(req, res, next) {
  return authorizeRole('admin')(req, res, next);
}

/**
 * Middleware que verifica se usu√°rio √© o pr√≥prio ou admin
 * √ötil para rotas como /users/:id onde usu√°rio pode ver seus pr√≥prios dados
 * @param {string} paramName - Nome do par√¢metro que cont√©m o ID (default: 'id')
 */
function requireOwnerOrAdmin(paramName = 'id') {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({ error: 'Usu√°rio n√£o autenticado' });
    }

    const resourceId = parseInt(req.params[paramName]);
    const userId = req.user.id;
    const userRole = req.user.role;

    // Admin sempre pode acessar, ou se for o pr√≥prio usu√°rio
    if (userRole === 'admin' || userId === resourceId) {
      return next();
    }

    return res.status(403).json({ 
      error: 'Permiss√£o insuficiente',
      message: 'Voc√™ s√≥ pode acessar seus pr√≥prios dados' 
    });
  };
}

module.exports = {
  authenticateToken,
  authorizeRole,
  requireAdmin,
  requireOwnerOrAdmin
};